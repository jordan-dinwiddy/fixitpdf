generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql" // Change this to match your database
  url      = env("DATABASE_URL")
}

model User {
  // All fields required by next auth
  id    String @id @default(uuid())
  name  String?
  email String @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  files File[]

  creditBalance  Int @default(10)
  transactions   AccountBalanceTransaction[] 

  showWelcomeMessage  Boolean @default(true)
}

// Required by nextAuth - https://authjs.dev/getting-started/adapters/prisma?_gl=1*g8pn6o*_gcl_au*MjEzNzE1NjE4Mi4xNzMxNTI1NDgz
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

// Required by nextAuth
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Required by nextAuth
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model File {
  id       String @id @default(uuid())
  name     String @default("Untitled")
  fileType String @default("unknown")
  state    String @default("uploading")
  processedFileId String?
  userId   String
  user     User @relation(fields: [userId], references: [id])
  issueCount Int @default(0)

  originalFileSizeBytes Int?
  processedFileSizeBytes Int?

  // How much it will cost the user in credits to process/fix this file.
  costInCredits Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // To support soft-deletion
  deletedAt DateTime? 
}

model AccountBalanceTransaction {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  amount     Int      // Amount of the adjustment (can be positive or negative)
  reason     String?  // Optional description of the adjustment
  idempotencyKey String?   @unique @default(uuid())
  createdAt  DateTime @default(now())
}